#include <stdio.h>
#include <stdlib.h>

// Definition of the linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insertEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to print the list
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to delete the middle node
void deleteMiddle(Node** head) {
    if (*head == NULL) {
        printf("List is empty.\n");
        return;
    }
    
    Node* slow = *head;
    Node* fast = *head;
    Node* prev = NULL;
    
    // Find the middle node using slow and fast pointers
    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    
    // If there is only one node
    if (prev == NULL) {
        free(*head);
        *head = NULL;
    } else {
        prev->next = slow->next;
        free(slow);
    }
}

// Main function to demonstrate the linked list operations
int main() {
    Node* head = NULL;
    
    // Inserting nodes
    insertEnd(&head, 10);
    insertEnd(&head, 20);
    insertEnd(&head, 30);
    insertEnd(&head, 40);
    insertEnd(&head, 50);
    
    printf("Original list:\n");
    printList(head);
    
    // Deleting the middle node
    deleteMiddle(&head);
    
    printf("List after deleting the middle node:\n");
    printList(head);
    
    // Free remaining nodes
    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }
    
    return 0;
}
